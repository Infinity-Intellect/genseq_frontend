{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","Form","props","state","file","fileToSend","columnData","0","1","2","3","resultSequence","onSubmit","bind","previewImage","handleDropDownChange","get","then","res","console","log","data","catch","error","h2Elt","document","createElement","setAttribute","innerHTML","result","getElementById","insertBefore","childNodes","formData","FormData","append","this","name","JSON","stringify","setState","post","headers","response","status","sequence","err","style","color","event","key","target","id","length","value","newColumnData","URL","createObjectURL","files","remove","className","onChange","fontSize","src","alt","type","accept","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.88a45db2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport \"../styles/form.css\"\r\nconst axios = require('axios')\r\n//const FormData = require('form-data')\r\nexport default class Form extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            file: '',\r\n            fileToSend: '',\r\n            columnData: { 0: 'A', 1: 'C', 2: 'T', 3: 'G' },\r\n            resultSequence: '',\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.previewImage = this.previewImage.bind(this)\r\n        this.handleDropDownChange = this.handleDropDownChange.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        axios.get(\"https://genseq-backend.herokuapp.com/\").then(\r\n            res => {\r\n                console.log(res.data)\r\n            }\r\n        ).catch(error => console.log(error))\r\n    }\r\n    onSubmit() {\r\n        let h2Elt=document.createElement('h2')\r\n        h2Elt.setAttribute(\"id\",\"h2seq\")\r\n        h2Elt.innerHTML=\"The Sequence is:\"\r\n        let result=document.getElementById('result')\r\n        result.insertBefore(h2Elt,result.childNodes[0])\r\n\r\n        let formData = new FormData()\r\n        formData.append(\"username\", \"sidd\")\r\n        formData.append('image', this.state.fileToSend, this.state.fileToSend.name)\r\n        formData.append('columnOrder', JSON.stringify(this.state.columnData))\r\n        this.setState({ resultSequence: 'Loading ...' })\r\n        axios.post(\"https://genseq-backend.herokuapp.com/getSequence\", formData, { headers: { 'content-type': 'multipart/form-data' } })\r\n            .then(response => {\r\n                console.log(response.status)\r\n                if(response.status === 200)\r\n                {                    \r\n                    this.setState({ resultSequence: response.data.sequence })\r\n                }\r\n\r\n            }).catch(err => {\r\n                this.setState({resultSequence:''})\r\n                h2Elt.innerHTML=\"*Sorry, we could not process that for you !*<br/>Please try another image\"\r\n                h2Elt.style.color=\"red\"\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n    handleDropDownChange(event) {\r\n        const key = event.target.id[event.target.id.length - 1] - 1\r\n        const value = event.target.value\r\n        const newColumnData = { ...this.state.columnData }\r\n        newColumnData[key] = value;\r\n        this.setState({ columnData: newColumnData })\r\n    }\r\n    previewImage(event) {\r\n        this.setState({ file: URL.createObjectURL(event.target.files[0]) })\r\n        this.setState({ fileToSend: event.target.files[0] })\r\n        \r\n        //When uploading subsequent images image\r\n        if(document.getElementById(\"h2seq\")!==null)\r\n        {\r\n            document.getElementById(\"h2seq\").remove()\r\n            this.setState({resultSequence:''})\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"form\">\r\n                <div className=\"columns\">\r\n                    <h2>Please enter the base column as in the image(left to right):</h2>\r\n                    <h4 className=\"warning\">*Ignore if order is correct*</h4>\r\n                    <div>\r\n                        Column 1:<select id=\"column1\" name=\"column1\" onChange={this.handleDropDownChange}>\r\n                            <option value=\"A\">A</option>\r\n                            <option value=\"C\">C</option>\r\n                            <option value=\"T\">T</option>\r\n                            <option value=\"G\">G</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        Column 2:<select id=\"column2\" name=\"column2\" onChange={this.handleDropDownChange}>\r\n                            <option value=\"C\">C</option>\r\n                            <option value=\"A\">A</option>\r\n                            <option value=\"T\">T</option>\r\n                            <option value=\"G\">G</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        Column 3:<select id=\"column3\" name=\"column3\" onChange={this.handleDropDownChange}>\r\n                            <option value=\"T\">T</option>\r\n                            <option value=\"A\">A</option>\r\n                            <option value=\"C\">C</option>\r\n                            <option value=\"G\">G</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        Column 4:<select id=\"column4\" name=\"column4\" onChange={this.handleDropDownChange}>\r\n                            <option value=\"G\">G</option>\r\n                            <option value=\"A\">A</option>\r\n                            <option value=\"C\">C</option>\r\n                            <option value=\"T\">T</option>\r\n                        </select>\r\n                    </div>\r\n                    <p className=\"warning\">*Please Verify that the above are correct*</p>\r\n                    <h3>Please upload the result of the experiment:</h3>\r\n                    <div id=\"uploadImage\" style={{ fontSize: \"20px\" }}>\r\n                        <div>\r\n                            <img src={this.state.file} className=\"previewImage\" alt=\"\" />\r\n                        </div>\r\n                        Upload Image:<input type=\"file\" id=\"img\" name=\"img\" accept=\"image/*\" onChange={this.previewImage}></input>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={this.onSubmit}>Submit</button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"result\" className=\"result\">\r\n                    <p id=\"result_para\">{this.state.resultSequence}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Form from \"./components/Form\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        GenSeq\n      </header>\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}